type AdminDashboardPayload {
	totalUsers: Int
	totalInactiveUsers: Int
	totalCardsCreated: Int
	totalCardsShared: Int
	totalEarnings: String
	error: String
}

type BusinessProfile {
	id: String
	companyName: String
	role: String
	category: String
	startDate: String
	endDate: String
	userId: String
}

input BusinessProfilePayload {
	companyName: String
	role: String
	category: String
	startDate: String
	endDate: String
	userId: String
}

type BusinessProfileResponse {
	businessProfile: BusinessProfile
	error: String
}

type BusinessProfilesPayload {
	businessProfiles: [BusinessProfile]
	error: String
}

type CancelUserSubscriptionResponse {
	data: String
	error: String
}

type Card {
	id: ID!
	name: String
	role: String
	email: String
	phone: String
	address: String
	website: String
	facebook: String
	twitter: String
	linkedIn: String
	createdAt: String
	businessProfileId: String!
	userId: String
	cardTemplateId: String
	status: String
	color: String
	category: String
}

type CardResponse {
	cardDetails: Card
	cardTemplate: CardTemplate
}

type CardTemplate {
	id: String
	backgroundColor: String
	borderBottomColor: String
}

input CardTemplateInput {
	backgroundColor: String
	borderBottomColor: String
}

type CardTemplateResponse {
	cardTemplate: CardTemplate
	error: String
}

type CardVersion {
	id: ID!
	name: String
	design: [String]
}

type CardsPayload {
	cards: [CardResponse]
	error: String
}

input ConfirmSignUpPayload {
	username: String
	confirmationCode: String
}

input CreateCardInput {
	name: String
	role: String
	email: String
	phone: String
	address: String
	website: String
	facebook: String
	twitter: String
	linkedIn: String
	userId: String
	businessProfileId: String
	cardTemplateId: String
}

type CreateCardPayload {
	card: Card
	error: String
}

input CreateSubscriptionSessionPayload {
	userId: String!
	customerPlan: String!
}

input ListAllUsersInput {
	limit: Int
	isFirst: Boolean
	lastEvaluatedKey: NextKeyInput
}

type ListCardTemplatesPayload {
	cardTemplates: [CardTemplate]
	error: String
}

type ListCategoriesPayload {
	categories: [String]
	error: String
}

type ListUser {
	id: ID!
	positionId: Int
	firstName: String
	lastName: String
	email: String
	avatar: String
	userName: String
	totalCards: Int
	subscriptionPlan: String
	group: String
}

type ListUsersPayload {
	users: [ListUser]
	total: Int
	lastEvaluatedKey: NextKey
	error: String
}

type Mutation {
	createCard(card: CreateCardInput!): CreateCardPayload
	shareCard(shareCardPayload: ShareCardPayload): String
	createBusinessProfile(createBusinessProfilePayload: BusinessProfilePayload): BusinessProfileResponse
	deleteBusinessProfile(id: String): String
	updateBusinessProfile(businessProfilePayload: UpdateBusinessProfilePayload!): BusinessProfileResponse
	activateUser(userId: String): String
	removeUser(userId: String): String
	suspendUser(userId: String): String
	subscriptionSession(subscriptionSessionPayload: CreateSubscriptionSessionPayload): SubscriptionSessionPayload
	updateUserSubscription(updateUserSubscriptionPayload: UpdateUserSubscriptionPayload!): UpdateUserSubscriptionResponse
	cancelUserSubscription(userId: String): CancelUserSubscriptionResponse
	userBillingPortal(userId: String): UserBillingPortalPayload
	disableUserCard(cardId: String): String
	signUp(signUpPayload: SignupPayload): String
	confirmSignUp(confirmSignUpPayload: ConfirmSignUpPayload): String
	createCardTemplate(cardTemplatePayload: CardTemplateInput): CardTemplateResponse
	removeReceivedCard(removeReceivedCardPayload: RemoveReceivedCardPayload): String
	activateUserCard(cardId: String): String
	updateAboutPage(data: String): PageData
	updatePrivacyPolicyPage(data: String): PageData
	updateTermsAndConditionsPage(data: String): PageData
	updateSubscriptionFeatures(updateFeatures: UpdateSubscriptionFeaturesInput): UpdateSubscriptionFeaturesPayload
	sendPushNotification(sendNotification: PushNotificationInput): String
	updateEndpoint(deviceToken: String): String
}

type NextKey {
	partitionType: String
	id: String
	item: String
}

input NextKeyInput {
	partitionType: String
	id: String
	item: String
}

type PageData {
	id: String
	data: String
	updatedAt: String
	error: String
}

input PushNotificationInput {
	title: String
	body: String
}

type Query {
	listReceivedCards(userId: String): CardsPayload
	listUserCards(userId: String): CardsPayload
	listSharedCards(userId: String): CardsPayload
	listUsersWhoSharedACard(cardId: String): UsersPayload
	listReceiversFromUser(userId: String): UsersPayload
	listSendersToUser(userId: String): UsersPayload
	listUserBusinessProfiles(userId: String): BusinessProfilesPayload
	getBusinessProfileById(id: String): BusinessProfileResponse
	listCardsByBusinessProfileId(businessProfileId: String): CardsPayload
	adminDashboard: AdminDashboardPayload
	listAllUsers(listUsers: ListAllUsersInput): ListUsersPayload
	mostSharedCards(userId: String): CardsPayload
	countUserCards(userId: String): Int
	listSubscriptionPlans: SubscriptionPlansPayload
	getUserSubscriptionStatus(userId: String): UserSubscriptionStatusPayload
	getUsersBySubscriptionPlan(plan: String): ListUsersPayload
	listDisabledUserCards(userId: String): CardsPayload
	listBusinessCategories: ListCategoriesPayload
	listCardTemplates: ListCardTemplatesPayload
	getCardTemplateById(id: String): CardTemplateResponse
	getAboutPage: PageData
	getPrivacyPolicyPage: PageData
	getTermsAndConditionsPage: PageData
}

input RemoveReceivedCardPayload {
	cardId: String
	userId: String
}

input ShareCardPayload {
	sender: String
	cardId: String
	recipient: String
}

input SignupPayload {
	phone_number: AWSPhone!
	email: AWSEmail!
	username: String!
	password: String!
}

type SubscriptionDetails {
	customerPlan: String
	subscriptionPrice: String
}

type SubscriptionFeatures {
	premiumFeatures: String
	standardFeatures: String
}

type SubscriptionPlanResponse {
	plan: String
	currency: String
	price: String
	features: String
}

type SubscriptionPlansPayload {
	subscriptionPlans: [SubscriptionPlanResponse]
	error: String
}

type SubscriptionResponse {
	id: String
	subscriptionData: SubscriptionDetails
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
}

type SubscriptionSessionPayload {
	url: String
	error: String
}

input UpdateBusinessProfilePayload {
	id: String
	companyName: String
	role: String
	category: String
	startDate: String
	endDate: String
}

input UpdateSubscriptionFeaturesInput {
	premiumFeatures: String
	standardFeatures: String
}

type UpdateSubscriptionFeaturesPayload {
	id: String
	features: SubscriptionFeatures
	updatedAt: String
	error: String
}

input UpdateUserSubscriptionPayload {
	userId: String!
	customerPlan: String!
}

type UpdateUserSubscriptionResponse {
	userSubscriptionData: SubscriptionResponse
	error: String
}

type User {
	id: ID!
	firstName: String
	lastName: String
	email: String
	address: String
	phoneNumber: String
	avatar: String
	userName: String
}

type UserBillingPortalPayload {
	url: String
	error: String
}

input UserInput {
	name: String
}

type UserSubscriptionStatusPayload {
	userSubscriptionData: SubscriptionResponse
	renewalDate: String
	cardLastDigits: String
	cardBrand: String
	currency: String
	error: String
}

type UsersPayload {
	users: [User]
	error: String
}